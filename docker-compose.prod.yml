# docker-compose.prod.yml
# Service Üretim ortamı

networks:
  sentiric-net:
    name: "${NETWORK_NAME:-sentiric-net}"
    driver: bridge
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET}
          gateway: ${NETWORK_GATEWAY}

services:
  # [capability-telephony]: Yetenek Servisleri (Capability Layer)
  # --------------------------------------------------  

  # sadece geçit olarak kullanılacak ise
  sip-gateway:
    image: ghcr.io/sentiric/sentiric-sip-gateway-service:${TAG:-latest}
    env_file: ["${ENV_FILE_PATH}"]
    volumes:
      - "${CONFIG_REPO_PATH}:/sentiric-config:ro"    
    ports:
      - "${SIP_GATEWAY_HTTP_PORT:-13010}:${SIP_GATEWAY_HTTP_PORT:-13010}"
      - "${SIP_GATEWAY_GRPC_PORT:-13011}:${SIP_GATEWAY_METRICS_PORT:-13011}"
      - "${SIP_GATEWAY_METRICS_PORT:-13012}:${SIP_GATEWAY_METRICS_PORT:-13012}"
      - "${SIP_GATEWAY_WS_PORT:-13013}:${SIP_GATEWAY_METRICS_PORT:-13013}"
      - "${SIP_GATEWAY_UDP_PORT:-13014}:${SIP_GATEWAY_UDP_PORT:-13014}/udp"
    networks:
      sentiric-net:
        ipv4_address: ${SIP_GATEWAY_IPV4_ADDRESS}
    # dns:
    #   - ${DISCOVERY_SERVICE_IPV4_ADDRESS}
    # dns_search:
    #   - ${DISCOVERY_DNS_SEARCH_DOMAIN} 
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f sentiric-sip-gateway-service || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    # depends_on:
    #   discovery-service: { condition: service_healthy }